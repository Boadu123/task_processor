package com.example.models;
import java.util.Random;
import java.util.concurrent.BlockingQueue;
import java.time.Instant;
import java.util.concurrent.PriorityBlockingQueue;

public class Producer implements Runnable {
    public static BlockingQueue<Task> queue = new PriorityBlockingQueue<>();
    private String producerName;
    private int numberOfTasks;
    private boolean highPriority;
    public Producer() {}

    public Producer(String producerName, int numberOfTasks, boolean highPriority) {
        this.producerName = producerName;
        this.numberOfTasks = numberOfTasks;
        this.highPriority = highPriority;
    }

    @Override
    public void run() {
        Random random = new Random();

        for (int i = 1; i <= numberOfTasks; i++) {
            try {
                int priority = highPriority ? 1 : 5;
                Task task = new Task.Builder()
                        .name(producerName + "-Task-" + i)
                        .priority(priority)
                        .payload("Generated by " + producerName)
                        .createdTimestamp(Instant.now())
                        .build();
                Thread.sleep(10000);
                queue.put(task);
                System.out.println(Thread.currentThread().getName() + " " + producerName + " submitted task: " + i + " " + task);

                Thread.sleep(200 + random.nextInt(2000));
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.err.println(producerName + " was interrupted");
            }
        }
    }

    public static class Builder {
        private String producerName;
        private int numberOfTasks;
        private boolean highPriority;


        public Builder producerName(String producerName) {
            this.producerName = producerName;
            return this;
        }

        public Builder numberOfTasks(int numberOfTasks) {
            this.numberOfTasks = numberOfTasks;
            return this;
        }

        public Builder highPriority(boolean highPriority) {
            this.highPriority = highPriority;
            return this;
        }

        public Producer build() {
            Producer producer = new Producer();
            producer.producerName = this.producerName;
            producer.numberOfTasks = this.numberOfTasks;
            producer.highPriority = this.highPriority;
            return producer;
        }
    }

    public static Builder builder() {
        return new Builder();
    }
}
